version: '3.7'
services:
  producer:
    build: ./producer
    container_name: producer
    depends_on:
      - kafka
    volumes:
      - .:/producer
    networks:
      default:
      project_global_network:

  postgres:
    image: postgres:9.6.2-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: zahar
      POSTGRES_DB: data
      POSTGRES_PASSWORD: zahar
    networks:
      default:
      project_global_network:

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ENABLE_CLIENT_SASL_KEY=false
    networks:
      default:
      project_global_network:

  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      default:
      project_global_network:

  kafka-interface:
    image: provectuslabs/kafka-ui
    container_name: kafka-interface
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_READONLY=true
    depends_on:
      - zookeeper
    networks:
      default:
      project_global_network:

  spark:
    image: docker.io/bitnami/spark:3
    container_name: spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - '8082:8082'
    networks:
      default:
      project_global_network:
    volumes:
      - ./jars_dir:/opt/bitnami/spark/ivy:z
    depends_on:
      - spark-streaming

  spark-worker-1:
    image: docker.io/bitnami/spark:3
    container_name: spark-worker-1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    networks:
      default:
      project_global_network:

  spark-worker-2:
    image: docker.io/bitnami/spark:3
    container_name: spark-worker-2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    networks:
      default:
      project_global_network:

  spark-streaming:
    build: ./spark_streaming
    container_name: spark_streaming
    depends_on:
      - producer
    networks:
      default:
      project_global_network:
    volumes:
      - ./jars_dir:/usr/src/app/target/scala-2.12/

  analytics:
    build: ./analytics
    container_name: analytics
    depends_on:
      - spark-streaming
    volumes:
      - .:/analytics
    environment:
      DATABASE_URL: postgres://zahar@postgres/data
    networks:
      default:
      project_global_network:

networks:
  default:
  project_global_network:
    external: true